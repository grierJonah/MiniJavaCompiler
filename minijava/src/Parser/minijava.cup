/*
 * CUP specification for the parser for a simple demo language.
 * Change this into the parser for your implementation of MiniJava.
 * CSE 401/P501 Au11.
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Code in the following section is included in the generated parser */

parser code {:
  
  /* Override default error message routine to handle line numbers correctly */
  /* This routine is also called in the process of handling fatal errors. */

  /** Report a non fatal error (or warning).  This method takes a message 
   *  string and an additional object (to be used by specializations 
   *  implemented in subclasses).  Prints the same simple error message
   *  as the base class version, but correctly labels the line number.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
	if (((Symbol)info).left != -1)
	  System.err.println(" at line " + ((Symbol)info).left +
			     " of input");
	else System.err.println("");
      else System.err.println("");
    }
:};  

/* end of code included in generated parser


/* Terminals (tokens returned by the scanner) */

/* reserved words: */
terminal DISPLAY, FOR, IF, ELSE, WHILE, PRIVATE, PUBLIC, STATIC, MAIN, FINAL, VOID, BOOLEAN, INT, TRUE;
terminal FALSE, EXTENDS, NEW, IMPLEMENTS, THIS, CLASS, RETURN, ARGSTRING, SYSTEMOUTPRINTLN, INTLITERAL, INTARRAY, LENGTH;

/* operators: */
terminal PLUS, BECOMES, TIMES, MINUS, NOT, AND, OR, LESS_THAN, EQUALS;

/* delimiters: */
terminal LPAREN, RPAREN, SEMICOLON, LCBRACKET, RCBRACKET, LBRACKET, RBRACKET, COMMA, DOT;

/* tokens with values: */
terminal String IDENTIFIER, INTEGER, DOUBLE, DOUBLELITERAL;


/* Nonterminals */
nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDecl ClassDeclExtended;
nonterminal ClassDecl ClassDeclRegular;
nonterminal ClassDeclList ClassDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal FormalList FormalList;
nonterminal FormalList FormalList2;
nonterminal Formal Formal;
nonterminal Type Type;
nonterminal Statement Statement;
nonterminal Statement IFStatement;
nonterminal Statement BlockStatement;
nonterminal Statement WhileStatement;
nonterminal Statement PrintStatement;
nonterminal StatementList StatementList;
nonterminal Assign AssignStatement;
nonterminal ArrayAssign AssignArrayStatement;
nonterminal Display DisplayStatement;
nonterminal ExpList ExpList;
nonterminal ExpList ExpList2;
nonterminal Exp Expression;
nonterminal Exp PlusExp;
nonterminal Exp MinusExp;
nonterminal Exp TimesExp;
nonterminal Exp LessThanExp;
nonterminal Exp AndExp;
nonterminal Exp ArrayLookupExp;
nonterminal Exp DotLengthExp;
nonterminal Exp NotExp;
nonterminal Exp CallExp;
nonterminal Exp TrueExp;
nonterminal Exp FalseExp;
nonterminal Exp ThisExp;
nonterminal Exp NewArrayExp;
nonterminal Exp NewObjectExp;
nonterminal Exp RegExp;
nonterminal IntegerLiteral IntLiteral;
nonterminal DoubleLiteral DoubleLiteral;
nonterminal Identifier Identifier;


/* Precedence declarations */
precedence left BECOMES;
precedence left AND;
precedence left LESS_THAN;
precedence left TIMES;
precedence left PLUS;
precedence left MINUS;
precedence left OR;
precedence left NOT;

precedence left LPAREN;
precedence left RPAREN;
precedence left LBRACKET;
precedence left RBRACKET;
precedence left DOT;

/* Productions */

            
Program				::= MainClass:mc ClassDeclList:cdl
						{: RESULT = new Program(mc, cdl, mcleft); :};

					
MainClass			::= CLASS Identifier:id1 LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier:id2 RPAREN LCBRACKET Statement:stmt1 RCBRACKET RCBRACKET
						{: RESULT = new MainClass(id1, id2, stmt1, id1left); :};


/* Class Declarations */
ClassDecl			::= ClassDeclExtended:s
						{: RESULT = s; :}
					| ClassDeclRegular:s
						{:RESULT = s; :};

ClassDeclList		::= ClassDecl:cd ClassDeclList:cl
						{: ClassDeclList cdlist = new ClassDeclList(cdleft);
						   cdlist.add(cd);
						   RESULT = cdlist; :}
					| /* empty */
						{: RESULT = new ClassDeclList(0); :};

ClassDeclExtended	::= CLASS Identifier:id1 EXTENDS Identifier:id2 LCBRACKET VarDeclList:vdl MethodDeclList:mdl RCBRACKET
						{: RESULT = new ClassDeclExtends(id1, id2, vdl, mdl, id1left); :};

ClassDeclRegular	::= CLASS Identifier:id1 LCBRACKET VarDeclList:vdl MethodDeclList:mdl RCBRACKET
						{: RESULT = new ClassDeclSimple(id1, vdl, mdl, id1left); :};


/* Var Declarations */
VarDeclList			::= VarDeclList:vdl VarDecl:vd
						{: VarDeclList vdlist = new VarDeclList(vdleft);
						   vdlist.add(vd);
						   RESULT = vdlist; :}
						   | /* empty */
					{: RESULT = new VarDeclList(0); :};

VarDecl				::= Type:t1 Identifier:id SEMICOLON
						{: RESULT = new VarDecl(t1, id, idleft); :};


/* Method Declarations */
MethodDeclList		::= MethodDeclList:mdl MethodDecl:md
						{: MethodDeclList mdlist = new MethodDeclList(mdleft);
						   mdlist.add(md);
						   RESULT = mdlist; :}
					| /* empty */
						{: RESULT = new MethodDeclList(0); :};

MethodDecl			::= PUBLIC Type:t1 Identifier:id1 LPAREN FormalList:fl1 RPAREN LCBRACKET VarDeclList:vdl StatementList:stmt1 RETURN Expression:arg1 SEMICOLON RCBRACKET
						{: RESULT = new MethodDecl(t1, id1, fl1, vdl, stmt1, arg1, t1left); :};


/* Types */
Type				::= INTARRAY:intArray
						{: RESULT = new IntArrayType(intArrayleft); :}
					| BOOLEAN:b
						{: RESULT = new BooleanType(bleft); :}
					| INT:integer
						{: RESULT = new IntegerType(integerleft); :}
					| IDENTIFIER:id
						{: RESULT = new IdentifierType(id, idleft); :};


/*Formal & FormalLists */
FormalList			::= Formal:f1 FormalList2:fl
						{: FormalList flist = new FormalList(f1left);
						   flist.add(f1);
						   RESULT = flist; :}
					| /* empty */
						{: RESULT = new FormalList(0); :};
						
FormalList2			::= COMMA Formal:f1 FormalList:fl
						{: FormalList flist = new FormalList(f1left);
						   flist.add(f1);
						   RESULT = flist; :}
					| /* empty */
						{: RESULT = new FormalList(0); :};

Formal				::= Type:t1 Identifier:id
						{: RESULT = new Formal(t1, id, idleft); :};

/* Statement & StatementLists */	
StatementList		::= Statement:s StatementList:sl
						{: StatementList slist = new StatementList(sleft);
						   slist.add(s);
						   RESULT = slist; :}
					| /* empty */
						{: RESULT = new StatementList(0); :};

Statement			::= AssignStatement:s
						{: RESULT = s; :}
					| AssignArrayStatement:s
						{: RESULT = s; :}
					| DisplayStatement:s
						{: RESULT = s; :}
					| BlockStatement:s
						{: RESULT = s; :}
					| IFStatement:s
						{: RESULT = s; :}
					| WhileStatement:s
						{: RESULT = s; :}
					| PrintStatement:s
						{: RESULT = s; :};

AssignStatement		::= Identifier:id BECOMES Expression:expr SEMICOLON
						{: RESULT = new Assign(id, expr, idleft); :};

AssignArrayStatement	::= Identifier:id LBRACKET Expression:arg1 RBRACKET BECOMES Expression:arg2 SEMICOLON
							{: RESULT = new ArrayAssign(id, arg1, arg2, idleft); :};

DisplayStatement	::= DISPLAY:d Expression:expr SEMICOLON
						{: RESULT = new Display(expr, dleft); :};
						
BlockStatement		::= LCBRACKET StatementList:sl RCBRACKET
						{: RESULT = new Block(sl, slleft); :};
						
IFStatement			::= IF LPAREN Expression:arg1 RPAREN Statement:s1 ELSE Statement:s2
						{: RESULT = new If(arg1, s1, s2, arg1left); :};

WhileStatement		::= WHILE LPAREN Expression:arg1 RPAREN Statement:s2
						{: RESULT = new While(arg1, s2, arg1left); :};

PrintStatement		::= SYSTEMOUTPRINTLN LPAREN Expression:arg1 RPAREN SEMICOLON
						{: RESULT = new Print(arg1, arg1left); :};


/* Expressions */				
Expression			::= IDENTIFIER:name
						{: RESULT = new IdentifierExp(name, nameleft); :}
					| IntLiteral:s
						{: RESULT = s; :}
					| PlusExp:s
						{: RESULT = s; :}
					| MinusExp:s
						{: RESULT = s; :}
					| TimesExp:s
						{: RESULT = s; :}
					| LessThanExp:s
						{: RESULT = s; :}
					| AndExp:s
						{: RESULT = s; :}
					| ArrayLookupExp:s
						{: RESULT = s; :}
					| DotLengthExp:s
						{: RESULT = s; :}
					| NotExp:s
						{: RESULT = s; :}
					| CallExp:s
						{: RESULT = s; :}
					| TrueExp:s
						{: RESULT = s; :}
					| FalseExp:s
						{: RESULT = s; :}
					| ThisExp:s
						{: RESULT = s; :}
					| NewArrayExp:s
						{: RESULT = s; :}
					| NewObjectExp:s
						{: RESULT = s; :}
					| RegExp:s
						{: RESULT = s; :};

PlusExp				::= Expression:arg1 PLUS Expression:arg2
						{: RESULT = new Plus(arg1, arg2, arg1left); :};
					
MinusExp			::= Expression:arg1 MINUS Expression:arg2
						{: RESULT = new Minus(arg1, arg2, arg1left); :};
					
TimesExp			::= Expression:arg1 TIMES Expression:arg2
						{: RESULT = new Times(arg1, arg2, arg1left); :};

LessThanExp			::= Expression:arg1 LESS_THAN Expression:arg2
						{: RESULT = new LessThan(arg1, arg2, arg1left); :};
						
AndExp				::= Expression:arg1 AND Expression:arg2
						{: RESULT = new And(arg1, arg2, arg1left); :};

ArrayLookupExp		::= Expression:arg1 LBRACKET Expression:arg2 RBRACKET
						{: RESULT = new ArrayLookup(arg1, arg2, arg1left); :};

DotLengthExp		::= Expression:arg1 DOT LENGTH
						{: RESULT = new ArrayLength(arg1, arg1left); :};

NotExp				::= NOT Expression:arg1
						{: RESULT = new Not(arg1, arg1left); :};
						
CallExp				::= Expression:arg1 DOT Identifier:id1 LPAREN ExpList:arglist1 RPAREN
						{: RESULT = new Call(arg1, id1, arglist1, arg1left); :};

TrueExp				::= TRUE:arg1
						{: RESULT = new True(arg1left); :};

FalseExp			::= FALSE:arg1
						{: RESULT = new False(arg1left); :};

ThisExp				::= THIS:arg1
						{: RESULT = new This(arg1left); :};

NewArrayExp			::= NEW INT LBRACKET Expression:arg1 RBRACKET
						{: RESULT = new NewArray(arg1, arg1left); :};

NewObjectExp		::= NEW Identifier:id1 LPAREN RPAREN
						{: RESULT = new NewObject(id1, id1left); :};

RegExp				::= LPAREN Expression:expr RPAREN
						{: RESULT = expr; :};

ExpList				::= Expression:arg1 ExpList2:elist
						{: ExpList explist = new ExpList(arg1left);
						   explist.add(arg1);
						   RESULT = explist; :}
						| /* empty */
						{: RESULT = new ExpList(0); :};
						
ExpList2			::= COMMA Expression:arg1 ExpList2:elist 
						{: ExpList explist = new ExpList(arg1left);
						   explist.add(arg1);
						   RESULT = explist; :}
					| /* empty */
						{: RESULT = new ExpList(0); :};

IntLiteral			::= INTLITERAL:arg1
						{: RESULT = new IntegerLiteral(Integer.parseInt((String)arg1), arg1left); :};
						
DoubleLiteral		::= DOUBLELITERAL:arg1
						{: RESULT = new DoubleLiteral(Double.parseDouble((String)arg1),arg1left); :};

Identifier			::= IDENTIFIER:id
						{: RESULT = new Identifier(id, idleft); :};