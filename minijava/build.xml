<!-- ant build file for cse minijava compiler project -->
<!-- hp, 1/10, 8/11, 1/16 -->

<!-- Possible future changes:
     - use symbolic variables for various class and path names
     - add options to interface better with internal eclipse compiler  -->

<project name="minijava" default="compile">

  <!-- build targets for compiler -->
  <!-- you might not need to change much of anything here except for compiler warnings -->

  <target name="init">
    <mkdir dir="build/classes" />
  </target>

  <target name="clean">
    <delete dir="build"/>
    <delete file="src/Parser/parser.java"/>
    <delete file="src/Parser/sym.java"/>
    <delete file="src/Scanner/scanner.java"/>
    <delete file="src/Scanner/scanner.java~"/>
  </target>

  <target name="check.parse.files">
    <uptodate targetfile="src/Parser/parser.java"
	      srcfile="src/Parser/minijava.cup"
	      property="parser.uptodate"/>
    <uptodate targetfile="src/Scanner/scanner.java"
	      srcfile="src/Scanner/minijava.jflex"
	      property="scanner.uptodate"/>
    <condition property="scanner.parser.uptodate">
      <and>
	<isset property="scanner.uptodate"/>
	<isset property="parser.uptodate"/>
      </and>
    </condition>
  </target>

  <target name="gen-parser" depends="check.parse.files"
	  unless="parser.uptodate">
    <java jar="lib/java-cup-11b.jar" fork="true" failonerror="true"
	  output="build/cup.out">
      <arg value="-dump_states"/>
      <arg value="-dump_grammar"/>
      <arg value="-dump_tables"/>
      <arg value="-destdir"/> <arg value="src/Parser"/>
      <arg value="src/Parser/minijava.cup"/>
    </java>
  </target>

  <target name="gen-scanner" depends="gen-parser, check.parse.files"
	  unless="scanner.parser.uptodate">
    <java classname="jflex.Main" classpath="lib/jflex-1.6.1.jar"
	  fork="true" failonerror="true">
      <arg value="src/Scanner/minijava.jflex"/>
    </java>
  </target>

<!-- Remove comment on compilerarg line below to generate compiler warnings 
     for unchecked casts.  Even if the minijava code is clean, there may be
     warnings in java code generated by cup. -->

  <target name="compile" depends="init, gen-scanner">
    <javac srcdir="src" destdir="build/classes" classpath="lib/java-cup-11b.jar" includeAntRuntime="true">
       <!-- <compilerarg value="-Xlint:unchecked"/> -->
    	<compilerarg value="-Xdiags:verbose"/>
    </javac>
  </target>

  <!-- targets for running test programs -->

  
  <!-- 
 	There are 4 custom ant builds used below to test the completeness of this project.
 	
 	1) test-scanner: 	Converts the text into symbols and prints the outcome to the console
 	2) test-parser: 	Uses a fun class called PrettyPrintVisitor to print the AST (abstract syntax tree) of the file
 	3) test-typecheck: 	Constructs a symbolTable and checks each symbols type to maintain proper syntax
 	4) test-codegen: 	Outputs source code into assembly in a file called "output.s" (Can be compiled and run using gcc)
  
  	5) test-minijava:	Uses command line to run each of the 4 tests above. To execute flags must be used along with 
  						specfic usage: java MiniJava [-A, -S, -P, -T] [filename.java or filename.txt]

  							-A : print AST with PrettyPrint (more or less same as -S)
  							-P : test-parser
  							-S : test-scanner 
  							-T : test-typecheck
  -->

  <target name="test-scanner" depends="compile">
    <java classname="TestScanner" classpath="build/classes;lib/java-cup-11b.jar"
	  fork="true" input="SamplePrograms/PassTypeCheckProgram.java">
    </java>
  </target>

  <target name="test-parser" depends="compile">
    <java classname="TestParser" classpath="build/classes;lib/java-cup-11b.jar"
	  fork="true" input="SamplePrograms/PrintProgramTest.java">
    </java>
  </target>
	
  <target name="test-typecheck" depends="compile">
  	<java classname="TestTypeCheck" classpath="build/classes;lib/java-cup-11b.jar"
  		fork="true" input="SamplePrograms/PassTypeCheckProgram.java">
  	</java>
  </target>

  <target name="test-codegen" depends="compile">
 	<java classname="TestCodegen" classpath="build/classes;lib/java-cup-11b.jar"  		
 	  fork="true" input="SamplePrograms/PrintProgramTest.java">
	</java>
  </target>
	
  <target name="test-minijava" depends="compile">
	<java classname="MiniJava" classpath="build/classes;lib/java-cup-11b.jar"
	  fork="true" input="SamplePrograms/PassTypeCheckProgram.java">
	</java>
  </target>
	

</project>
