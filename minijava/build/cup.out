Warning : Terminal "EQUALS" was declared but never used
Warning : Terminal "DOUBLE" was declared but never used
Warning : Terminal "INTEGER" was declared but never used
Warning : Terminal "PRIVATE" was declared but never used
Warning : Terminal "FOR" was declared but never used
Warning : Terminal "OR" was declared but never used
Warning : Terminal "FINAL" was declared but never used
Warning : Terminal "IMPLEMENTS" was declared but never used
Warning : *** Production "DoubleLiteral ::= DOUBLELITERAL " never reduced
===== Terminals =====
[0]EOF [1]error [2]DISPLAY [3]FOR [4]IF 
[5]ELSE [6]WHILE [7]PRIVATE [8]PUBLIC [9]STATIC 
[10]MAIN [11]FINAL [12]VOID [13]BOOLEAN [14]INT 
[15]TRUE [16]FALSE [17]EXTENDS [18]NEW [19]IMPLEMENTS 
[20]THIS [21]CLASS [22]RETURN [23]ARGSTRING [24]SYSTEMOUTPRINTLN 
[25]INTLITERAL [26]INTARRAY [27]LENGTH [28]PLUS [29]BECOMES 
[30]TIMES [31]MINUS [32]NOT [33]AND [34]OR 
[35]LESS_THAN [36]EQUALS [37]LPAREN [38]RPAREN [39]SEMICOLON 
[40]LCBRACKET [41]RCBRACKET [42]LBRACKET [43]RBRACKET [44]COMMA 
[45]DOT [46]IDENTIFIER [47]INTEGER [48]DOUBLE [49]DOUBLELITERAL 


===== Non terminals =====
[0]Program [1]MainClass [2]ClassDecl [3]ClassDeclExtended [4]ClassDeclRegular 
[5]ClassDeclList [6]VarDeclList [7]VarDecl [8]MethodDeclList [9]MethodDecl 
[10]FormalList [11]FormalList2 [12]Formal [13]Type [14]Statement 
[15]IFStatement [16]BlockStatement [17]WhileStatement [18]PrintStatement [19]StatementList 
[20]AssignStatement [21]AssignArrayStatement [22]DisplayStatement [23]ExpList [24]ExpList2 
[25]Expression [26]PlusExp [27]MinusExp [28]TimesExp [29]LessThanExp 
[30]AndExp [31]ArrayLookupExp [32]DotLengthExp [33]NotExp [34]CallExp 
[35]TrueExp [36]FalseExp [37]ThisExp [38]NewArrayExp [39]NewObjectExp 
[40]RegExp [41]IntLiteral [42]DoubleLiteral [43]Identifier 

===== Productions =====
[0] Program ::= MainClass ClassDeclList 
[1] $START ::= Program EOF 
[2] MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET 
[3] ClassDecl ::= ClassDeclExtended 
[4] ClassDecl ::= ClassDeclRegular 
[5] ClassDeclList ::= ClassDecl ClassDeclList 
[6] ClassDeclList ::= 
[7] ClassDeclExtended ::= CLASS Identifier EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET 
[8] ClassDeclRegular ::= CLASS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET 
[9] VarDeclList ::= VarDeclList VarDecl 
[10] VarDeclList ::= 
[11] VarDecl ::= Type Identifier SEMICOLON 
[12] MethodDeclList ::= MethodDeclList MethodDecl 
[13] MethodDeclList ::= 
[14] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET 
[15] Type ::= INTARRAY 
[16] Type ::= BOOLEAN 
[17] Type ::= INT 
[18] Type ::= IDENTIFIER 
[19] FormalList ::= Formal FormalList2 
[20] FormalList ::= 
[21] FormalList2 ::= COMMA Formal FormalList 
[22] FormalList2 ::= 
[23] Formal ::= Type Identifier 
[24] StatementList ::= Statement StatementList 
[25] StatementList ::= 
[26] Statement ::= AssignStatement 
[27] Statement ::= AssignArrayStatement 
[28] Statement ::= DisplayStatement 
[29] Statement ::= BlockStatement 
[30] Statement ::= IFStatement 
[31] Statement ::= WhileStatement 
[32] Statement ::= PrintStatement 
[33] AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
[34] AssignArrayStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
[35] DisplayStatement ::= DISPLAY Expression SEMICOLON 
[36] BlockStatement ::= LCBRACKET StatementList RCBRACKET 
[37] IFStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
[38] WhileStatement ::= WHILE LPAREN Expression RPAREN Statement 
[39] PrintStatement ::= SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON 
[40] Expression ::= IDENTIFIER 
[41] Expression ::= IntLiteral 
[42] Expression ::= PlusExp 
[43] Expression ::= MinusExp 
[44] Expression ::= TimesExp 
[45] Expression ::= LessThanExp 
[46] Expression ::= AndExp 
[47] Expression ::= ArrayLookupExp 
[48] Expression ::= DotLengthExp 
[49] Expression ::= NotExp 
[50] Expression ::= CallExp 
[51] Expression ::= TrueExp 
[52] Expression ::= FalseExp 
[53] Expression ::= ThisExp 
[54] Expression ::= NewArrayExp 
[55] Expression ::= NewObjectExp 
[56] Expression ::= RegExp 
[57] PlusExp ::= Expression PLUS Expression 
[58] MinusExp ::= Expression MINUS Expression 
[59] TimesExp ::= Expression TIMES Expression 
[60] LessThanExp ::= Expression LESS_THAN Expression 
[61] AndExp ::= Expression AND Expression 
[62] ArrayLookupExp ::= Expression LBRACKET Expression RBRACKET 
[63] DotLengthExp ::= Expression DOT LENGTH 
[64] NotExp ::= NOT Expression 
[65] CallExp ::= Expression DOT Identifier LPAREN ExpList RPAREN 
[66] TrueExp ::= TRUE 
[67] FalseExp ::= FALSE 
[68] ThisExp ::= THIS 
[69] NewArrayExp ::= NEW INT LBRACKET Expression RBRACKET 
[70] NewObjectExp ::= NEW Identifier LPAREN RPAREN 
[71] RegExp ::= LPAREN Expression RPAREN 
[72] ExpList ::= Expression ExpList2 
[73] ExpList ::= 
[74] ExpList2 ::= COMMA Expression ExpList2 
[75] ExpList2 ::= 
[76] IntLiteral ::= INTLITERAL 
[77] DoubleLiteral ::= DOUBLELITERAL 
[78] Identifier ::= IDENTIFIER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [MainClass ::= (*) CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
  [$START ::= (*) Program EOF , {EOF }]
  [Program ::= (*) MainClass ClassDeclList , {EOF }]
}
transition on CLASS to state [3]
transition on MainClass to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [166]

-------------------
lalr_state [2]: {
  [ClassDeclRegular ::= (*) CLASS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [ClassDeclList ::= (*) ClassDecl ClassDeclList , {EOF }]
  [ClassDeclExtended ::= (*) CLASS Identifier EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) ClassDeclRegular , {EOF CLASS }]
  [ClassDeclList ::= (*) , {EOF }]
  [ClassDecl ::= (*) ClassDeclExtended , {EOF CLASS }]
  [Program ::= MainClass (*) ClassDeclList , {EOF }]
}
transition on CLASS to state [123]
transition on ClassDeclRegular to state [122]
transition on ClassDecl to state [121]
transition on ClassDeclExtended to state [120]
transition on ClassDeclList to state [119]

-------------------
lalr_state [3]: {
  [MainClass ::= CLASS (*) Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {LCBRACKET }]
}
transition on Identifier to state [5]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [4]: {
  [Identifier ::= IDENTIFIER (*) , {BOOLEAN INT EXTENDS INTARRAY BECOMES LPAREN RPAREN SEMICOLON LCBRACKET LBRACKET COMMA IDENTIFIER }]
}

-------------------
lalr_state [5]: {
  [MainClass ::= CLASS Identifier (*) LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on LCBRACKET to state [6]

-------------------
lalr_state [6]: {
  [MainClass ::= CLASS Identifier LCBRACKET (*) PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on PUBLIC to state [7]

-------------------
lalr_state [7]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC (*) STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on STATIC to state [8]

-------------------
lalr_state [8]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC (*) VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on VOID to state [9]

-------------------
lalr_state [9]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID (*) MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on MAIN to state [10]

-------------------
lalr_state [10]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN (*) LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on LPAREN to state [11]

-------------------
lalr_state [11]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN (*) ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on ARGSTRING to state [12]

-------------------
lalr_state [12]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING (*) Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {RPAREN }]
}
transition on Identifier to state [13]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [13]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier (*) RPAREN LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on RPAREN to state [14]

-------------------
lalr_state [14]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN (*) LCBRACKET Statement RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on LCBRACKET to state [15]

-------------------
lalr_state [15]: {
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {RCBRACKET }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {RCBRACKET }]
  [Statement ::= (*) WhileStatement , {RCBRACKET }]
  [Statement ::= (*) DisplayStatement , {RCBRACKET }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {RCBRACKET }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {RCBRACKET }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {RCBRACKET }]
  [Statement ::= (*) IFStatement , {RCBRACKET }]
  [Statement ::= (*) AssignArrayStatement , {RCBRACKET }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {RCBRACKET }]
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET (*) Statement RCBRACKET RCBRACKET , {EOF CLASS }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {RCBRACKET }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {RCBRACKET }]
  [Statement ::= (*) BlockStatement , {RCBRACKET }]
  [Statement ::= (*) AssignStatement , {RCBRACKET }]
}
transition on SYSTEMOUTPRINTLN to state [29]
transition on AssignStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [27]
transition on Statement to state [26]
transition on WhileStatement to state [25]
transition on IF to state [24]
transition on Identifier to state [23]
transition on IFStatement to state [22]
transition on BlockStatement to state [21]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on LCBRACKET to state [18]
transition on AssignArrayStatement to state [17]
transition on WHILE to state [16]

-------------------
lalr_state [16]: {
  [WhileStatement ::= WHILE (*) LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on LPAREN to state [115]

-------------------
lalr_state [17]: {
  [Statement ::= AssignArrayStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [18]: {
  [StatementList ::= (*) , {RCBRACKET }]
  [Statement ::= (*) IFStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [BlockStatement ::= LCBRACKET (*) StatementList RCBRACKET , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement StatementList , {RCBRACKET }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignArrayStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SYSTEMOUTPRINTLN to state [29]
transition on AssignStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [27]
transition on Statement to state [112]
transition on WhileStatement to state [25]
transition on IF to state [24]
transition on Identifier to state [23]
transition on IFStatement to state [22]
transition on BlockStatement to state [21]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on StatementList to state [111]
transition on LCBRACKET to state [18]
transition on AssignArrayStatement to state [17]
transition on WHILE to state [16]

-------------------
lalr_state [19]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [DisplayStatement ::= DISPLAY (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on Expression to state [109]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [20]: {
  [Statement ::= DisplayStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [21]: {
  [Statement ::= BlockStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [22]: {
  [Statement ::= IFStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [23]: {
  [AssignArrayStatement ::= Identifier (*) LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on LBRACKET to state [101]
transition on BECOMES to state [100]

-------------------
lalr_state [24]: {
  [IFStatement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on LPAREN to state [94]

-------------------
lalr_state [25]: {
  [Statement ::= WhileStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [26]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement (*) RCBRACKET RCBRACKET , {EOF CLASS }]
}
transition on RCBRACKET to state [92]

-------------------
lalr_state [27]: {
  [Statement ::= PrintStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [28]: {
  [Statement ::= AssignStatement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [29]: {
  [PrintStatement ::= SYSTEMOUTPRINTLN (*) LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on LPAREN to state [30]

-------------------
lalr_state [30]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PrintStatement ::= SYSTEMOUTPRINTLN LPAREN (*) Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on Expression to state [55]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [31]: {
  [Expression ::= FalseExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [32]: {
  [Expression ::= IntLiteral (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [33]: {
  [Expression ::= LessThanExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [34]: {
  [Expression ::= RegExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [35]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= NOT (*) Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Expression to state [91]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [36]: {
  [Expression ::= IDENTIFIER (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [37]: {
  [Expression ::= DotLengthExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [38]: {
  [Expression ::= ThisExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [39]: {
  [TrueExp ::= TRUE (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [40]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [RegExp ::= LPAREN (*) Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on Expression to state [89]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [41]: {
  [ThisExp ::= THIS (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [42]: {
  [Expression ::= PlusExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [43]: {
  [Expression ::= ArrayLookupExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [44]: {
  [Expression ::= TimesExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [45]: {
  [Expression ::= MinusExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [46]: {
  [Expression ::= NewObjectExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [47]: {
  [IntLiteral ::= INTLITERAL (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [48]: {
  [FalseExp ::= FALSE (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [49]: {
  [Expression ::= AndExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [50]: {
  [NewObjectExp ::= NEW (*) Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [NewArrayExp ::= NEW (*) INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Identifier to state [83]
transition on INT to state [82]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [51]: {
  [Expression ::= NotExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [52]: {
  [Expression ::= CallExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [53]: {
  [Expression ::= NewArrayExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [54]: {
  [Expression ::= TrueExp (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [55]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PrintStatement ::= SYSTEMOUTPRINTLN LPAREN Expression (*) RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on RPAREN to state [56]

-------------------
lalr_state [56]: {
  [PrintStatement ::= SYSTEMOUTPRINTLN LPAREN Expression RPAREN (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SEMICOLON to state [81]

-------------------
lalr_state [57]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression LESS_THAN (*) Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Expression to state [80]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [58]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression AND (*) Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Expression to state [79]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [59]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression PLUS (*) Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Expression to state [78]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [60]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression MINUS (*) Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Expression to state [77]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [61]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression TIMES (*) Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Expression to state [76]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [62]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= Expression LBRACKET (*) Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
}
transition on Expression to state [74]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [63]: {
  [CallExp ::= Expression DOT (*) Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [DotLengthExp ::= Expression DOT (*) LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on Identifier to state [65]
transition on IDENTIFIER to state [4]
transition on LENGTH to state [64]

-------------------
lalr_state [64]: {
  [DotLengthExp ::= Expression DOT LENGTH (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [65]: {
  [CallExp ::= Expression DOT Identifier (*) LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [66]

-------------------
lalr_state [66]: {
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList ::= (*) , {RPAREN }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [CallExp ::= Expression DOT Identifier LPAREN (*) ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList ::= (*) Expression ExpList2 , {RPAREN }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
}
transition on ExpList to state [68]
transition on Expression to state [67]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [67]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList2 ::= (*) COMMA Expression ExpList2 , {RPAREN }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList2 ::= (*) , {RPAREN }]
  [ExpList ::= Expression (*) ExpList2 , {RPAREN }]
}
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on COMMA to state [71]
transition on DOT to state [63]
transition on ExpList2 to state [70]
transition on PLUS to state [59]
transition on LESS_THAN to state [57]
transition on AND to state [58]
transition on MINUS to state [60]

-------------------
lalr_state [68]: {
  [CallExp ::= Expression DOT Identifier LPAREN ExpList (*) RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on RPAREN to state [69]

-------------------
lalr_state [69]: {
  [CallExp ::= Expression DOT Identifier LPAREN ExpList RPAREN (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [70]: {
  [ExpList ::= Expression ExpList2 (*) , {RPAREN }]
}

-------------------
lalr_state [71]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList2 ::= COMMA (*) Expression ExpList2 , {RPAREN }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
}
transition on Expression to state [72]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [72]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList2 ::= COMMA Expression (*) ExpList2 , {RPAREN }]
  [ExpList2 ::= (*) COMMA Expression ExpList2 , {RPAREN }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET COMMA DOT }]
  [ExpList2 ::= (*) , {RPAREN }]
}
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on COMMA to state [71]
transition on ExpList2 to state [73]
transition on DOT to state [63]
transition on PLUS to state [59]
transition on LESS_THAN to state [57]
transition on AND to state [58]
transition on MINUS to state [60]

-------------------
lalr_state [73]: {
  [ExpList2 ::= COMMA Expression ExpList2 (*) , {RPAREN }]
}

-------------------
lalr_state [74]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= Expression LBRACKET Expression (*) RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on RBRACKET to state [75]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [75]: {
  [ArrayLookupExp ::= Expression LBRACKET Expression RBRACKET (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [76]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression TIMES Expression (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [77]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression MINUS Expression (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [78]: {
  [PlusExp ::= Expression PLUS Expression (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [79]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression AND Expression (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [80]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression LESS_THAN Expression (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [81]: {
  [PrintStatement ::= SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [82]: {
  [NewArrayExp ::= NEW INT (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LBRACKET to state [86]

-------------------
lalr_state [83]: {
  [NewObjectExp ::= NEW Identifier (*) LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on LPAREN to state [84]

-------------------
lalr_state [84]: {
  [NewObjectExp ::= NEW Identifier LPAREN (*) RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on RPAREN to state [85]

-------------------
lalr_state [85]: {
  [NewObjectExp ::= NEW Identifier LPAREN RPAREN (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [86]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewArrayExp ::= NEW INT LBRACKET (*) Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
}
transition on Expression to state [87]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [87]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewArrayExp ::= NEW INT LBRACKET Expression (*) RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on RBRACKET to state [88]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [88]: {
  [NewArrayExp ::= NEW INT LBRACKET Expression RBRACKET (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [89]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [RegExp ::= LPAREN Expression (*) RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on RPAREN to state [90]

-------------------
lalr_state [90]: {
  [RegExp ::= LPAREN Expression RPAREN (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}

-------------------
lalr_state [91]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [NotExp ::= NOT Expression (*) , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN SEMICOLON LBRACKET RBRACKET COMMA DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [92]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET (*) RCBRACKET , {EOF CLASS }]
}
transition on RCBRACKET to state [93]

-------------------
lalr_state [93]: {
  [MainClass ::= CLASS Identifier LCBRACKET PUBLIC STATIC VOID MAIN LPAREN ARGSTRING Identifier RPAREN LCBRACKET Statement RCBRACKET RCBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [94]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [IFStatement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on Expression to state [95]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [95]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [IFStatement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on RPAREN to state [96]

-------------------
lalr_state [96]: {
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ELSE }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) WhileStatement , {ELSE }]
  [Statement ::= (*) DisplayStatement , {ELSE }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {ELSE }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {ELSE }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) IFStatement , {ELSE }]
  [Statement ::= (*) AssignArrayStatement , {ELSE }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ELSE }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {ELSE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {ELSE }]
  [Statement ::= (*) BlockStatement , {ELSE }]
  [Statement ::= (*) AssignStatement , {ELSE }]
  [IFStatement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SYSTEMOUTPRINTLN to state [29]
transition on AssignStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [27]
transition on Statement to state [97]
transition on WhileStatement to state [25]
transition on IF to state [24]
transition on Identifier to state [23]
transition on IFStatement to state [22]
transition on BlockStatement to state [21]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on LCBRACKET to state [18]
transition on AssignArrayStatement to state [17]
transition on WHILE to state [16]

-------------------
lalr_state [97]: {
  [IFStatement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on ELSE to state [98]

-------------------
lalr_state [98]: {
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) IFStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignArrayStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [IFStatement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SYSTEMOUTPRINTLN to state [29]
transition on AssignStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [27]
transition on Statement to state [99]
transition on WhileStatement to state [25]
transition on IF to state [24]
transition on Identifier to state [23]
transition on IFStatement to state [22]
transition on BlockStatement to state [21]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on LCBRACKET to state [18]
transition on AssignArrayStatement to state [17]
transition on WHILE to state [16]

-------------------
lalr_state [99]: {
  [IFStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [100]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AssignStatement ::= Identifier BECOMES (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on Expression to state [107]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [101]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AssignArrayStatement ::= Identifier LBRACKET (*) Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
}
transition on Expression to state [102]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [102]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AssignArrayStatement ::= Identifier LBRACKET Expression (*) RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN LBRACKET RBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on RBRACKET to state [103]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]

-------------------
lalr_state [103]: {
  [AssignArrayStatement ::= Identifier LBRACKET Expression RBRACKET (*) BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on BECOMES to state [104]

-------------------
lalr_state [104]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AssignArrayStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on Expression to state [105]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [105]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AssignArrayStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on SEMICOLON to state [106]

-------------------
lalr_state [106]: {
  [AssignArrayStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [107]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AssignStatement ::= Identifier BECOMES Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on SEMICOLON to state [108]

-------------------
lalr_state [108]: {
  [AssignStatement ::= Identifier BECOMES Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [109]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [DisplayStatement ::= DISPLAY Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on SEMICOLON to state [110]

-------------------
lalr_state [110]: {
  [DisplayStatement ::= DISPLAY Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [111]: {
  [BlockStatement ::= LCBRACKET StatementList (*) RCBRACKET , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on RCBRACKET to state [114]

-------------------
lalr_state [112]: {
  [StatementList ::= (*) , {RETURN RCBRACKET }]
  [Statement ::= (*) IFStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [StatementList ::= Statement (*) StatementList , {RETURN RCBRACKET }]
  [StatementList ::= (*) Statement StatementList , {RETURN RCBRACKET }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignArrayStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SYSTEMOUTPRINTLN to state [29]
transition on AssignStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [27]
transition on Statement to state [112]
transition on WhileStatement to state [25]
transition on IF to state [24]
transition on Identifier to state [23]
transition on IFStatement to state [22]
transition on BlockStatement to state [21]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on LCBRACKET to state [18]
transition on StatementList to state [113]
transition on AssignArrayStatement to state [17]
transition on WHILE to state [16]

-------------------
lalr_state [113]: {
  [StatementList ::= Statement StatementList (*) , {RETURN RCBRACKET }]
}

-------------------
lalr_state [114]: {
  [BlockStatement ::= LCBRACKET StatementList RCBRACKET (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [115]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [WhileStatement ::= WHILE LPAREN (*) Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on Expression to state [116]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [116]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [WhileStatement ::= WHILE LPAREN Expression (*) RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN RPAREN LBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on RPAREN to state [117]

-------------------
lalr_state [117]: {
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) IFStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [WhileStatement ::= WHILE LPAREN Expression RPAREN (*) Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignArrayStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SYSTEMOUTPRINTLN to state [29]
transition on AssignStatement to state [28]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [27]
transition on Statement to state [118]
transition on WhileStatement to state [25]
transition on IF to state [24]
transition on Identifier to state [23]
transition on IFStatement to state [22]
transition on BlockStatement to state [21]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on LCBRACKET to state [18]
transition on AssignArrayStatement to state [17]
transition on WHILE to state [16]

-------------------
lalr_state [118]: {
  [WhileStatement ::= WHILE LPAREN Expression RPAREN Statement (*) , {DISPLAY IF ELSE WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [119]: {
  [Program ::= MainClass ClassDeclList (*) , {EOF }]
}

-------------------
lalr_state [120]: {
  [ClassDecl ::= ClassDeclExtended (*) , {EOF CLASS }]
}

-------------------
lalr_state [121]: {
  [ClassDeclRegular ::= (*) CLASS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [ClassDeclList ::= ClassDecl (*) ClassDeclList , {EOF }]
  [ClassDeclList ::= (*) ClassDecl ClassDeclList , {EOF }]
  [ClassDeclExtended ::= (*) CLASS Identifier EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) ClassDeclRegular , {EOF CLASS }]
  [ClassDeclList ::= (*) , {EOF }]
  [ClassDecl ::= (*) ClassDeclExtended , {EOF CLASS }]
}
transition on CLASS to state [123]
transition on ClassDeclRegular to state [122]
transition on ClassDeclList to state [165]
transition on ClassDecl to state [121]
transition on ClassDeclExtended to state [120]

-------------------
lalr_state [122]: {
  [ClassDecl ::= ClassDeclRegular (*) , {EOF CLASS }]
}

-------------------
lalr_state [123]: {
  [ClassDeclExtended ::= CLASS (*) Identifier EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {EXTENDS LCBRACKET }]
  [ClassDeclRegular ::= CLASS (*) Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
}
transition on Identifier to state [124]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [124]: {
  [ClassDeclExtended ::= CLASS Identifier (*) EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [ClassDeclRegular ::= CLASS Identifier (*) LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
}
transition on LCBRACKET to state [126]
transition on EXTENDS to state [125]

-------------------
lalr_state [125]: {
  [ClassDeclExtended ::= CLASS Identifier EXTENDS (*) Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {LCBRACKET }]
}
transition on Identifier to state [160]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [126]: {
  [VarDeclList ::= (*) , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [ClassDeclRegular ::= CLASS Identifier LCBRACKET (*) VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
}
transition on VarDeclList to state [127]

-------------------
lalr_state [127]: {
  [ClassDeclRegular ::= CLASS Identifier LCBRACKET VarDeclList (*) MethodDeclList RCBRACKET , {EOF CLASS }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDeclList ::= (*) , {PUBLIC RCBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RCBRACKET }]
}
transition on INT to state [134]
transition on INTARRAY to state [133]
transition on BOOLEAN to state [132]
transition on IDENTIFIER to state [131]
transition on MethodDeclList to state [130]
transition on VarDecl to state [129]
transition on Type to state [128]

-------------------
lalr_state [128]: {
  [Identifier ::= (*) IDENTIFIER , {SEMICOLON }]
  [VarDecl ::= Type (*) Identifier SEMICOLON , {DISPLAY IF WHILE PUBLIC BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on Identifier to state [158]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [129]: {
  [VarDeclList ::= VarDeclList VarDecl (*) , {DISPLAY IF WHILE PUBLIC BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [130]: {
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RCBRACKET }]
  [ClassDeclRegular ::= CLASS Identifier LCBRACKET VarDeclList MethodDeclList (*) RCBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on RCBRACKET to state [137]
transition on PUBLIC to state [136]
transition on MethodDecl to state [135]

-------------------
lalr_state [131]: {
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [132]: {
  [Type ::= BOOLEAN (*) , {IDENTIFIER }]
}

-------------------
lalr_state [133]: {
  [Type ::= INTARRAY (*) , {IDENTIFIER }]
}

-------------------
lalr_state [134]: {
  [Type ::= INT (*) , {IDENTIFIER }]
}

-------------------
lalr_state [135]: {
  [MethodDeclList ::= MethodDeclList MethodDecl (*) , {PUBLIC RCBRACKET }]
}

-------------------
lalr_state [136]: {
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on INTARRAY to state [133]
transition on INT to state [134]
transition on BOOLEAN to state [132]
transition on IDENTIFIER to state [131]
transition on Type to state [138]

-------------------
lalr_state [137]: {
  [ClassDeclRegular ::= CLASS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [138]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on Identifier to state [139]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [139]: {
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on LPAREN to state [140]

-------------------
lalr_state [140]: {
  [FormalList ::= (*) Formal FormalList2 , {RPAREN }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [FormalList ::= (*) , {RPAREN }]
  [Type ::= (*) INT , {IDENTIFIER }]
}
transition on INTARRAY to state [133]
transition on INT to state [134]
transition on BOOLEAN to state [132]
transition on IDENTIFIER to state [131]
transition on Formal to state [143]
transition on Type to state [142]
transition on FormalList to state [141]

-------------------
lalr_state [141]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on RPAREN to state [149]

-------------------
lalr_state [142]: {
  [Formal ::= Type (*) Identifier , {BOOLEAN INT INTARRAY RPAREN COMMA IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BOOLEAN INT INTARRAY RPAREN COMMA IDENTIFIER }]
}
transition on Identifier to state [148]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [143]: {
  [FormalList2 ::= (*) COMMA Formal FormalList , {RPAREN }]
  [FormalList2 ::= (*) , {RPAREN }]
  [FormalList ::= Formal (*) FormalList2 , {RPAREN }]
}
transition on FormalList2 to state [145]
transition on COMMA to state [144]

-------------------
lalr_state [144]: {
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [FormalList2 ::= COMMA (*) Formal FormalList , {RPAREN }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {BOOLEAN INT INTARRAY RPAREN IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
}
transition on INTARRAY to state [133]
transition on INT to state [134]
transition on BOOLEAN to state [132]
transition on IDENTIFIER to state [131]
transition on Formal to state [146]
transition on Type to state [142]

-------------------
lalr_state [145]: {
  [FormalList ::= Formal FormalList2 (*) , {RPAREN }]
}

-------------------
lalr_state [146]: {
  [FormalList ::= (*) Formal FormalList2 , {RPAREN }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [FormalList2 ::= COMMA Formal (*) FormalList , {RPAREN }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [FormalList ::= (*) , {RPAREN }]
  [Type ::= (*) INT , {IDENTIFIER }]
}
transition on INTARRAY to state [133]
transition on INT to state [134]
transition on BOOLEAN to state [132]
transition on IDENTIFIER to state [131]
transition on Formal to state [143]
transition on Type to state [142]
transition on FormalList to state [147]

-------------------
lalr_state [147]: {
  [FormalList2 ::= COMMA Formal FormalList (*) , {RPAREN }]
}

-------------------
lalr_state [148]: {
  [Formal ::= Type Identifier (*) , {BOOLEAN INT INTARRAY RPAREN COMMA IDENTIFIER }]
}

-------------------
lalr_state [149]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on LCBRACKET to state [150]

-------------------
lalr_state [150]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET (*) VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
  [VarDeclList ::= (*) , {DISPLAY IF WHILE BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {DISPLAY IF WHILE BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET IDENTIFIER }]
}
transition on VarDeclList to state [151]

-------------------
lalr_state [151]: {
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [StatementList ::= (*) , {RETURN }]
  [Statement ::= (*) IFStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY IF WHILE BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList (*) StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCBRACKET StatementList RCBRACKET , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {DISPLAY IF WHILE BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement StatementList , {RETURN }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [AssignArrayStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) SYSTEMOUTPRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [Statement ::= (*) AssignArrayStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
  [IFStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE RETURN SYSTEMOUTPRINTLN LCBRACKET IDENTIFIER }]
}
transition on LCBRACKET to state [18]
transition on BlockStatement to state [21]
transition on StatementList to state [153]
transition on SYSTEMOUTPRINTLN to state [29]
transition on DisplayStatement to state [20]
transition on DISPLAY to state [19]
transition on Statement to state [112]
transition on IFStatement to state [22]
transition on VarDecl to state [129]
transition on Identifier to state [23]
transition on AssignStatement to state [28]
transition on INTARRAY to state [133]
transition on BOOLEAN to state [132]
transition on WhileStatement to state [25]
transition on Type to state [128]
transition on IF to state [24]
transition on IDENTIFIER to state [152]
transition on AssignArrayStatement to state [17]
transition on PrintStatement to state [27]
transition on WHILE to state [16]
transition on INT to state [134]

-------------------
lalr_state [152]: {
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
  [Identifier ::= IDENTIFIER (*) , {BECOMES LBRACKET }]
}

-------------------
lalr_state [153]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList (*) RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on RETURN to state [154]

-------------------
lalr_state [154]: {
  [Expression ::= (*) FalseExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= (*) Expression PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [FalseExp ::= (*) FALSE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) LessThanExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) CallExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewObjectExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= (*) Expression LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= (*) Expression DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewObjectExp ::= (*) NEW Identifier LPAREN RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) MinusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) DotLengthExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ThisExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= (*) Expression MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN (*) Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
  [DotLengthExp ::= (*) Expression DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ThisExp ::= (*) THIS , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) IntLiteral , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) AndExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TrueExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) RegExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [AndExp ::= (*) Expression AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TrueExp ::= (*) TRUE , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [RegExp ::= (*) LPAREN Expression RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [IntLiteral ::= (*) INTLITERAL , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) TimesExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NotExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) NewArrayExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= (*) Expression TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NotExp ::= (*) NOT Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [NewArrayExp ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) PlusExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [Expression ::= (*) ArrayLookupExp , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on Expression to state [155]
transition on TrueExp to state [54]
transition on NewArrayExp to state [53]
transition on CallExp to state [52]
transition on NotExp to state [51]
transition on NEW to state [50]
transition on AndExp to state [49]
transition on FALSE to state [48]
transition on INTLITERAL to state [47]
transition on NewObjectExp to state [46]
transition on MinusExp to state [45]
transition on TimesExp to state [44]
transition on ArrayLookupExp to state [43]
transition on PlusExp to state [42]
transition on THIS to state [41]
transition on LPAREN to state [40]
transition on TRUE to state [39]
transition on ThisExp to state [38]
transition on DotLengthExp to state [37]
transition on IDENTIFIER to state [36]
transition on NOT to state [35]
transition on RegExp to state [34]
transition on LessThanExp to state [33]
transition on IntLiteral to state [32]
transition on FalseExp to state [31]

-------------------
lalr_state [155]: {
  [DotLengthExp ::= Expression (*) DOT LENGTH , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [LessThanExp ::= Expression (*) LESS_THAN Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [PlusExp ::= Expression (*) PLUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [CallExp ::= Expression (*) DOT Identifier LPAREN ExpList RPAREN , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [ArrayLookupExp ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [TimesExp ::= Expression (*) TIMES Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression (*) SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
  [AndExp ::= Expression (*) AND Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
  [MinusExp ::= Expression (*) MINUS Expression , {PLUS TIMES MINUS AND LESS_THAN SEMICOLON LBRACKET DOT }]
}
transition on DOT to state [63]
transition on LBRACKET to state [62]
transition on TIMES to state [61]
transition on MINUS to state [60]
transition on PLUS to state [59]
transition on AND to state [58]
transition on LESS_THAN to state [57]
transition on SEMICOLON to state [156]

-------------------
lalr_state [156]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON (*) RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on RCBRACKET to state [157]

-------------------
lalr_state [157]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET (*) , {PUBLIC RCBRACKET }]
}

-------------------
lalr_state [158]: {
  [VarDecl ::= Type Identifier (*) SEMICOLON , {DISPLAY IF WHILE PUBLIC BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET RCBRACKET IDENTIFIER }]
}
transition on SEMICOLON to state [159]

-------------------
lalr_state [159]: {
  [VarDecl ::= Type Identifier SEMICOLON (*) , {DISPLAY IF WHILE PUBLIC BOOLEAN INT RETURN SYSTEMOUTPRINTLN INTARRAY LCBRACKET RCBRACKET IDENTIFIER }]
}

-------------------
lalr_state [160]: {
  [ClassDeclExtended ::= CLASS Identifier EXTENDS Identifier (*) LCBRACKET VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
}
transition on LCBRACKET to state [161]

-------------------
lalr_state [161]: {
  [VarDeclList ::= (*) , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [ClassDeclExtended ::= CLASS Identifier EXTENDS Identifier LCBRACKET (*) VarDeclList MethodDeclList RCBRACKET , {EOF CLASS }]
}
transition on VarDeclList to state [162]

-------------------
lalr_state [162]: {
  [Type ::= (*) INT , {IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [ClassDeclExtended ::= CLASS Identifier EXTENDS Identifier LCBRACKET VarDeclList (*) MethodDeclList RCBRACKET , {EOF CLASS }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDeclList ::= (*) , {PUBLIC RCBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTARRAY , {IDENTIFIER }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {PUBLIC BOOLEAN INT INTARRAY RCBRACKET IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RCBRACKET }]
}
transition on INT to state [134]
transition on INTARRAY to state [133]
transition on BOOLEAN to state [132]
transition on IDENTIFIER to state [131]
transition on MethodDeclList to state [163]
transition on VarDecl to state [129]
transition on Type to state [128]

-------------------
lalr_state [163]: {
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RCBRACKET }]
  [ClassDeclExtended ::= CLASS Identifier EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList (*) RCBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCBRACKET , {PUBLIC RCBRACKET }]
}
transition on RCBRACKET to state [164]
transition on PUBLIC to state [136]
transition on MethodDecl to state [135]

-------------------
lalr_state [164]: {
  [ClassDeclExtended ::= CLASS Identifier EXTENDS Identifier LCBRACKET VarDeclList MethodDeclList RCBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [165]: {
  [ClassDeclList ::= ClassDecl ClassDeclList (*) , {EOF }]
}

-------------------
lalr_state [166]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 21:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 166)]
From state #2
 [term 0:REDUCE(with prod 6)] [term 21:SHIFT(to state 123)]
From state #3
 [term 46:SHIFT(to state 4)]
From state #4
 [term 13:REDUCE(with prod 78)] [term 14:REDUCE(with prod 78)]
 [term 17:REDUCE(with prod 78)] [term 26:REDUCE(with prod 78)]
 [term 29:REDUCE(with prod 78)] [term 37:REDUCE(with prod 78)]
 [term 38:REDUCE(with prod 78)] [term 39:REDUCE(with prod 78)]
 [term 40:REDUCE(with prod 78)] [term 42:REDUCE(with prod 78)]
 [term 44:REDUCE(with prod 78)] [term 46:REDUCE(with prod 78)]
From state #5
 [term 40:SHIFT(to state 6)]
From state #6
 [term 8:SHIFT(to state 7)]
From state #7
 [term 9:SHIFT(to state 8)]
From state #8
 [term 12:SHIFT(to state 9)]
From state #9
 [term 10:SHIFT(to state 10)]
From state #10
 [term 37:SHIFT(to state 11)]
From state #11
 [term 23:SHIFT(to state 12)]
From state #12
 [term 46:SHIFT(to state 4)]
From state #13
 [term 38:SHIFT(to state 14)]
From state #14
 [term 40:SHIFT(to state 15)]
From state #15
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 24:SHIFT(to state 29)]
 [term 40:SHIFT(to state 18)] [term 46:SHIFT(to state 4)]
From state #16
 [term 37:SHIFT(to state 115)]
From state #17
 [term 2:REDUCE(with prod 27)] [term 4:REDUCE(with prod 27)]
 [term 5:REDUCE(with prod 27)] [term 6:REDUCE(with prod 27)]
 [term 22:REDUCE(with prod 27)] [term 24:REDUCE(with prod 27)]
 [term 40:REDUCE(with prod 27)] [term 41:REDUCE(with prod 27)]
 [term 46:REDUCE(with prod 27)]
From state #18
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 24:SHIFT(to state 29)]
 [term 40:SHIFT(to state 18)] [term 41:REDUCE(with prod 25)]
 [term 46:SHIFT(to state 4)]
From state #19
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #20
 [term 2:REDUCE(with prod 28)] [term 4:REDUCE(with prod 28)]
 [term 5:REDUCE(with prod 28)] [term 6:REDUCE(with prod 28)]
 [term 22:REDUCE(with prod 28)] [term 24:REDUCE(with prod 28)]
 [term 40:REDUCE(with prod 28)] [term 41:REDUCE(with prod 28)]
 [term 46:REDUCE(with prod 28)]
From state #21
 [term 2:REDUCE(with prod 29)] [term 4:REDUCE(with prod 29)]
 [term 5:REDUCE(with prod 29)] [term 6:REDUCE(with prod 29)]
 [term 22:REDUCE(with prod 29)] [term 24:REDUCE(with prod 29)]
 [term 40:REDUCE(with prod 29)] [term 41:REDUCE(with prod 29)]
 [term 46:REDUCE(with prod 29)]
From state #22
 [term 2:REDUCE(with prod 30)] [term 4:REDUCE(with prod 30)]
 [term 5:REDUCE(with prod 30)] [term 6:REDUCE(with prod 30)]
 [term 22:REDUCE(with prod 30)] [term 24:REDUCE(with prod 30)]
 [term 40:REDUCE(with prod 30)] [term 41:REDUCE(with prod 30)]
 [term 46:REDUCE(with prod 30)]
From state #23
 [term 29:SHIFT(to state 100)] [term 42:SHIFT(to state 101)]
From state #24
 [term 37:SHIFT(to state 94)]
From state #25
 [term 2:REDUCE(with prod 31)] [term 4:REDUCE(with prod 31)]
 [term 5:REDUCE(with prod 31)] [term 6:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 24:REDUCE(with prod 31)]
 [term 40:REDUCE(with prod 31)] [term 41:REDUCE(with prod 31)]
 [term 46:REDUCE(with prod 31)]
From state #26
 [term 41:SHIFT(to state 92)]
From state #27
 [term 2:REDUCE(with prod 32)] [term 4:REDUCE(with prod 32)]
 [term 5:REDUCE(with prod 32)] [term 6:REDUCE(with prod 32)]
 [term 22:REDUCE(with prod 32)] [term 24:REDUCE(with prod 32)]
 [term 40:REDUCE(with prod 32)] [term 41:REDUCE(with prod 32)]
 [term 46:REDUCE(with prod 32)]
From state #28
 [term 2:REDUCE(with prod 26)] [term 4:REDUCE(with prod 26)]
 [term 5:REDUCE(with prod 26)] [term 6:REDUCE(with prod 26)]
 [term 22:REDUCE(with prod 26)] [term 24:REDUCE(with prod 26)]
 [term 40:REDUCE(with prod 26)] [term 41:REDUCE(with prod 26)]
 [term 46:REDUCE(with prod 26)]
From state #29
 [term 37:SHIFT(to state 30)]
From state #30
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #31
 [term 28:REDUCE(with prod 52)] [term 30:REDUCE(with prod 52)]
 [term 31:REDUCE(with prod 52)] [term 33:REDUCE(with prod 52)]
 [term 35:REDUCE(with prod 52)] [term 38:REDUCE(with prod 52)]
 [term 39:REDUCE(with prod 52)] [term 42:REDUCE(with prod 52)]
 [term 43:REDUCE(with prod 52)] [term 44:REDUCE(with prod 52)]
 [term 45:REDUCE(with prod 52)]
From state #32
 [term 28:REDUCE(with prod 41)] [term 30:REDUCE(with prod 41)]
 [term 31:REDUCE(with prod 41)] [term 33:REDUCE(with prod 41)]
 [term 35:REDUCE(with prod 41)] [term 38:REDUCE(with prod 41)]
 [term 39:REDUCE(with prod 41)] [term 42:REDUCE(with prod 41)]
 [term 43:REDUCE(with prod 41)] [term 44:REDUCE(with prod 41)]
 [term 45:REDUCE(with prod 41)]
From state #33
 [term 28:REDUCE(with prod 45)] [term 30:REDUCE(with prod 45)]
 [term 31:REDUCE(with prod 45)] [term 33:REDUCE(with prod 45)]
 [term 35:REDUCE(with prod 45)] [term 38:REDUCE(with prod 45)]
 [term 39:REDUCE(with prod 45)] [term 42:REDUCE(with prod 45)]
 [term 43:REDUCE(with prod 45)] [term 44:REDUCE(with prod 45)]
 [term 45:REDUCE(with prod 45)]
From state #34
 [term 28:REDUCE(with prod 56)] [term 30:REDUCE(with prod 56)]
 [term 31:REDUCE(with prod 56)] [term 33:REDUCE(with prod 56)]
 [term 35:REDUCE(with prod 56)] [term 38:REDUCE(with prod 56)]
 [term 39:REDUCE(with prod 56)] [term 42:REDUCE(with prod 56)]
 [term 43:REDUCE(with prod 56)] [term 44:REDUCE(with prod 56)]
 [term 45:REDUCE(with prod 56)]
From state #35
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #36
 [term 28:REDUCE(with prod 40)] [term 30:REDUCE(with prod 40)]
 [term 31:REDUCE(with prod 40)] [term 33:REDUCE(with prod 40)]
 [term 35:REDUCE(with prod 40)] [term 38:REDUCE(with prod 40)]
 [term 39:REDUCE(with prod 40)] [term 42:REDUCE(with prod 40)]
 [term 43:REDUCE(with prod 40)] [term 44:REDUCE(with prod 40)]
 [term 45:REDUCE(with prod 40)]
From state #37
 [term 28:REDUCE(with prod 48)] [term 30:REDUCE(with prod 48)]
 [term 31:REDUCE(with prod 48)] [term 33:REDUCE(with prod 48)]
 [term 35:REDUCE(with prod 48)] [term 38:REDUCE(with prod 48)]
 [term 39:REDUCE(with prod 48)] [term 42:REDUCE(with prod 48)]
 [term 43:REDUCE(with prod 48)] [term 44:REDUCE(with prod 48)]
 [term 45:REDUCE(with prod 48)]
From state #38
 [term 28:REDUCE(with prod 53)] [term 30:REDUCE(with prod 53)]
 [term 31:REDUCE(with prod 53)] [term 33:REDUCE(with prod 53)]
 [term 35:REDUCE(with prod 53)] [term 38:REDUCE(with prod 53)]
 [term 39:REDUCE(with prod 53)] [term 42:REDUCE(with prod 53)]
 [term 43:REDUCE(with prod 53)] [term 44:REDUCE(with prod 53)]
 [term 45:REDUCE(with prod 53)]
From state #39
 [term 28:REDUCE(with prod 66)] [term 30:REDUCE(with prod 66)]
 [term 31:REDUCE(with prod 66)] [term 33:REDUCE(with prod 66)]
 [term 35:REDUCE(with prod 66)] [term 38:REDUCE(with prod 66)]
 [term 39:REDUCE(with prod 66)] [term 42:REDUCE(with prod 66)]
 [term 43:REDUCE(with prod 66)] [term 44:REDUCE(with prod 66)]
 [term 45:REDUCE(with prod 66)]
From state #40
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #41
 [term 28:REDUCE(with prod 68)] [term 30:REDUCE(with prod 68)]
 [term 31:REDUCE(with prod 68)] [term 33:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
 [term 39:REDUCE(with prod 68)] [term 42:REDUCE(with prod 68)]
 [term 43:REDUCE(with prod 68)] [term 44:REDUCE(with prod 68)]
 [term 45:REDUCE(with prod 68)]
From state #42
 [term 28:REDUCE(with prod 42)] [term 30:REDUCE(with prod 42)]
 [term 31:REDUCE(with prod 42)] [term 33:REDUCE(with prod 42)]
 [term 35:REDUCE(with prod 42)] [term 38:REDUCE(with prod 42)]
 [term 39:REDUCE(with prod 42)] [term 42:REDUCE(with prod 42)]
 [term 43:REDUCE(with prod 42)] [term 44:REDUCE(with prod 42)]
 [term 45:REDUCE(with prod 42)]
From state #43
 [term 28:REDUCE(with prod 47)] [term 30:REDUCE(with prod 47)]
 [term 31:REDUCE(with prod 47)] [term 33:REDUCE(with prod 47)]
 [term 35:REDUCE(with prod 47)] [term 38:REDUCE(with prod 47)]
 [term 39:REDUCE(with prod 47)] [term 42:REDUCE(with prod 47)]
 [term 43:REDUCE(with prod 47)] [term 44:REDUCE(with prod 47)]
 [term 45:REDUCE(with prod 47)]
From state #44
 [term 28:REDUCE(with prod 44)] [term 30:REDUCE(with prod 44)]
 [term 31:REDUCE(with prod 44)] [term 33:REDUCE(with prod 44)]
 [term 35:REDUCE(with prod 44)] [term 38:REDUCE(with prod 44)]
 [term 39:REDUCE(with prod 44)] [term 42:REDUCE(with prod 44)]
 [term 43:REDUCE(with prod 44)] [term 44:REDUCE(with prod 44)]
 [term 45:REDUCE(with prod 44)]
From state #45
 [term 28:REDUCE(with prod 43)] [term 30:REDUCE(with prod 43)]
 [term 31:REDUCE(with prod 43)] [term 33:REDUCE(with prod 43)]
 [term 35:REDUCE(with prod 43)] [term 38:REDUCE(with prod 43)]
 [term 39:REDUCE(with prod 43)] [term 42:REDUCE(with prod 43)]
 [term 43:REDUCE(with prod 43)] [term 44:REDUCE(with prod 43)]
 [term 45:REDUCE(with prod 43)]
From state #46
 [term 28:REDUCE(with prod 55)] [term 30:REDUCE(with prod 55)]
 [term 31:REDUCE(with prod 55)] [term 33:REDUCE(with prod 55)]
 [term 35:REDUCE(with prod 55)] [term 38:REDUCE(with prod 55)]
 [term 39:REDUCE(with prod 55)] [term 42:REDUCE(with prod 55)]
 [term 43:REDUCE(with prod 55)] [term 44:REDUCE(with prod 55)]
 [term 45:REDUCE(with prod 55)]
From state #47
 [term 28:REDUCE(with prod 76)] [term 30:REDUCE(with prod 76)]
 [term 31:REDUCE(with prod 76)] [term 33:REDUCE(with prod 76)]
 [term 35:REDUCE(with prod 76)] [term 38:REDUCE(with prod 76)]
 [term 39:REDUCE(with prod 76)] [term 42:REDUCE(with prod 76)]
 [term 43:REDUCE(with prod 76)] [term 44:REDUCE(with prod 76)]
 [term 45:REDUCE(with prod 76)]
From state #48
 [term 28:REDUCE(with prod 67)] [term 30:REDUCE(with prod 67)]
 [term 31:REDUCE(with prod 67)] [term 33:REDUCE(with prod 67)]
 [term 35:REDUCE(with prod 67)] [term 38:REDUCE(with prod 67)]
 [term 39:REDUCE(with prod 67)] [term 42:REDUCE(with prod 67)]
 [term 43:REDUCE(with prod 67)] [term 44:REDUCE(with prod 67)]
 [term 45:REDUCE(with prod 67)]
From state #49
 [term 28:REDUCE(with prod 46)] [term 30:REDUCE(with prod 46)]
 [term 31:REDUCE(with prod 46)] [term 33:REDUCE(with prod 46)]
 [term 35:REDUCE(with prod 46)] [term 38:REDUCE(with prod 46)]
 [term 39:REDUCE(with prod 46)] [term 42:REDUCE(with prod 46)]
 [term 43:REDUCE(with prod 46)] [term 44:REDUCE(with prod 46)]
 [term 45:REDUCE(with prod 46)]
From state #50
 [term 14:SHIFT(to state 82)] [term 46:SHIFT(to state 4)]
From state #51
 [term 28:REDUCE(with prod 49)] [term 30:REDUCE(with prod 49)]
 [term 31:REDUCE(with prod 49)] [term 33:REDUCE(with prod 49)]
 [term 35:REDUCE(with prod 49)] [term 38:REDUCE(with prod 49)]
 [term 39:REDUCE(with prod 49)] [term 42:REDUCE(with prod 49)]
 [term 43:REDUCE(with prod 49)] [term 44:REDUCE(with prod 49)]
 [term 45:REDUCE(with prod 49)]
From state #52
 [term 28:REDUCE(with prod 50)] [term 30:REDUCE(with prod 50)]
 [term 31:REDUCE(with prod 50)] [term 33:REDUCE(with prod 50)]
 [term 35:REDUCE(with prod 50)] [term 38:REDUCE(with prod 50)]
 [term 39:REDUCE(with prod 50)] [term 42:REDUCE(with prod 50)]
 [term 43:REDUCE(with prod 50)] [term 44:REDUCE(with prod 50)]
 [term 45:REDUCE(with prod 50)]
From state #53
 [term 28:REDUCE(with prod 54)] [term 30:REDUCE(with prod 54)]
 [term 31:REDUCE(with prod 54)] [term 33:REDUCE(with prod 54)]
 [term 35:REDUCE(with prod 54)] [term 38:REDUCE(with prod 54)]
 [term 39:REDUCE(with prod 54)] [term 42:REDUCE(with prod 54)]
 [term 43:REDUCE(with prod 54)] [term 44:REDUCE(with prod 54)]
 [term 45:REDUCE(with prod 54)]
From state #54
 [term 28:REDUCE(with prod 51)] [term 30:REDUCE(with prod 51)]
 [term 31:REDUCE(with prod 51)] [term 33:REDUCE(with prod 51)]
 [term 35:REDUCE(with prod 51)] [term 38:REDUCE(with prod 51)]
 [term 39:REDUCE(with prod 51)] [term 42:REDUCE(with prod 51)]
 [term 43:REDUCE(with prod 51)] [term 44:REDUCE(with prod 51)]
 [term 45:REDUCE(with prod 51)]
From state #55
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 38:SHIFT(to state 56)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #56
 [term 39:SHIFT(to state 81)]
From state #57
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #58
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #59
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #60
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #61
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #62
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #63
 [term 27:SHIFT(to state 64)] [term 46:SHIFT(to state 4)]
From state #64
 [term 28:REDUCE(with prod 63)] [term 30:REDUCE(with prod 63)]
 [term 31:REDUCE(with prod 63)] [term 33:REDUCE(with prod 63)]
 [term 35:REDUCE(with prod 63)] [term 38:REDUCE(with prod 63)]
 [term 39:REDUCE(with prod 63)] [term 42:REDUCE(with prod 63)]
 [term 43:REDUCE(with prod 63)] [term 44:REDUCE(with prod 63)]
 [term 45:REDUCE(with prod 63)]
From state #65
 [term 37:SHIFT(to state 66)]
From state #66
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 38:REDUCE(with prod 73)]
 [term 46:SHIFT(to state 36)]
From state #67
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 38:REDUCE(with prod 75)]
 [term 42:SHIFT(to state 62)] [term 44:SHIFT(to state 71)]
 [term 45:SHIFT(to state 63)]
From state #68
 [term 38:SHIFT(to state 69)]
From state #69
 [term 28:REDUCE(with prod 65)] [term 30:REDUCE(with prod 65)]
 [term 31:REDUCE(with prod 65)] [term 33:REDUCE(with prod 65)]
 [term 35:REDUCE(with prod 65)] [term 38:REDUCE(with prod 65)]
 [term 39:REDUCE(with prod 65)] [term 42:REDUCE(with prod 65)]
 [term 43:REDUCE(with prod 65)] [term 44:REDUCE(with prod 65)]
 [term 45:REDUCE(with prod 65)]
From state #70
 [term 38:REDUCE(with prod 72)]
From state #71
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #72
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 38:REDUCE(with prod 75)]
 [term 42:SHIFT(to state 62)] [term 44:SHIFT(to state 71)]
 [term 45:SHIFT(to state 63)]
From state #73
 [term 38:REDUCE(with prod 74)]
From state #74
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 42:SHIFT(to state 62)]
 [term 43:SHIFT(to state 75)] [term 45:SHIFT(to state 63)]
From state #75
 [term 28:REDUCE(with prod 62)] [term 30:REDUCE(with prod 62)]
 [term 31:REDUCE(with prod 62)] [term 33:REDUCE(with prod 62)]
 [term 35:REDUCE(with prod 62)] [term 38:REDUCE(with prod 62)]
 [term 39:REDUCE(with prod 62)] [term 42:REDUCE(with prod 62)]
 [term 43:REDUCE(with prod 62)] [term 44:REDUCE(with prod 62)]
 [term 45:REDUCE(with prod 62)]
From state #76
 [term 28:SHIFT(to state 59)] [term 30:REDUCE(with prod 59)]
 [term 31:SHIFT(to state 60)] [term 33:REDUCE(with prod 59)]
 [term 35:REDUCE(with prod 59)] [term 38:REDUCE(with prod 59)]
 [term 39:REDUCE(with prod 59)] [term 42:SHIFT(to state 62)]
 [term 43:REDUCE(with prod 59)] [term 44:REDUCE(with prod 59)]
 [term 45:SHIFT(to state 63)]
From state #77
 [term 28:REDUCE(with prod 58)] [term 30:REDUCE(with prod 58)]
 [term 31:REDUCE(with prod 58)] [term 33:REDUCE(with prod 58)]
 [term 35:REDUCE(with prod 58)] [term 38:REDUCE(with prod 58)]
 [term 39:REDUCE(with prod 58)] [term 42:SHIFT(to state 62)]
 [term 43:REDUCE(with prod 58)] [term 44:REDUCE(with prod 58)]
 [term 45:SHIFT(to state 63)]
From state #78
 [term 28:REDUCE(with prod 57)] [term 30:REDUCE(with prod 57)]
 [term 31:SHIFT(to state 60)] [term 33:REDUCE(with prod 57)]
 [term 35:REDUCE(with prod 57)] [term 38:REDUCE(with prod 57)]
 [term 39:REDUCE(with prod 57)] [term 42:SHIFT(to state 62)]
 [term 43:REDUCE(with prod 57)] [term 44:REDUCE(with prod 57)]
 [term 45:SHIFT(to state 63)]
From state #79
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:REDUCE(with prod 61)]
 [term 35:SHIFT(to state 57)] [term 38:REDUCE(with prod 61)]
 [term 39:REDUCE(with prod 61)] [term 42:SHIFT(to state 62)]
 [term 43:REDUCE(with prod 61)] [term 44:REDUCE(with prod 61)]
 [term 45:SHIFT(to state 63)]
From state #80
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:REDUCE(with prod 60)]
 [term 35:REDUCE(with prod 60)] [term 38:REDUCE(with prod 60)]
 [term 39:REDUCE(with prod 60)] [term 42:SHIFT(to state 62)]
 [term 43:REDUCE(with prod 60)] [term 44:REDUCE(with prod 60)]
 [term 45:SHIFT(to state 63)]
From state #81
 [term 2:REDUCE(with prod 39)] [term 4:REDUCE(with prod 39)]
 [term 5:REDUCE(with prod 39)] [term 6:REDUCE(with prod 39)]
 [term 22:REDUCE(with prod 39)] [term 24:REDUCE(with prod 39)]
 [term 40:REDUCE(with prod 39)] [term 41:REDUCE(with prod 39)]
 [term 46:REDUCE(with prod 39)]
From state #82
 [term 42:SHIFT(to state 86)]
From state #83
 [term 37:SHIFT(to state 84)]
From state #84
 [term 38:SHIFT(to state 85)]
From state #85
 [term 28:REDUCE(with prod 70)] [term 30:REDUCE(with prod 70)]
 [term 31:REDUCE(with prod 70)] [term 33:REDUCE(with prod 70)]
 [term 35:REDUCE(with prod 70)] [term 38:REDUCE(with prod 70)]
 [term 39:REDUCE(with prod 70)] [term 42:REDUCE(with prod 70)]
 [term 43:REDUCE(with prod 70)] [term 44:REDUCE(with prod 70)]
 [term 45:REDUCE(with prod 70)]
From state #86
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #87
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 42:SHIFT(to state 62)]
 [term 43:SHIFT(to state 88)] [term 45:SHIFT(to state 63)]
From state #88
 [term 28:REDUCE(with prod 69)] [term 30:REDUCE(with prod 69)]
 [term 31:REDUCE(with prod 69)] [term 33:REDUCE(with prod 69)]
 [term 35:REDUCE(with prod 69)] [term 38:REDUCE(with prod 69)]
 [term 39:REDUCE(with prod 69)] [term 42:REDUCE(with prod 69)]
 [term 43:REDUCE(with prod 69)] [term 44:REDUCE(with prod 69)]
 [term 45:REDUCE(with prod 69)]
From state #89
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 38:SHIFT(to state 90)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #90
 [term 28:REDUCE(with prod 71)] [term 30:REDUCE(with prod 71)]
 [term 31:REDUCE(with prod 71)] [term 33:REDUCE(with prod 71)]
 [term 35:REDUCE(with prod 71)] [term 38:REDUCE(with prod 71)]
 [term 39:REDUCE(with prod 71)] [term 42:REDUCE(with prod 71)]
 [term 43:REDUCE(with prod 71)] [term 44:REDUCE(with prod 71)]
 [term 45:REDUCE(with prod 71)]
From state #91
 [term 28:REDUCE(with prod 64)] [term 30:REDUCE(with prod 64)]
 [term 31:REDUCE(with prod 64)] [term 33:REDUCE(with prod 64)]
 [term 35:REDUCE(with prod 64)] [term 38:REDUCE(with prod 64)]
 [term 39:REDUCE(with prod 64)] [term 42:SHIFT(to state 62)]
 [term 43:REDUCE(with prod 64)] [term 44:REDUCE(with prod 64)]
 [term 45:SHIFT(to state 63)]
From state #92
 [term 41:SHIFT(to state 93)]
From state #93
 [term 0:REDUCE(with prod 2)] [term 21:REDUCE(with prod 2)]
From state #94
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #95
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 38:SHIFT(to state 96)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #96
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 24:SHIFT(to state 29)]
 [term 40:SHIFT(to state 18)] [term 46:SHIFT(to state 4)]
From state #97
 [term 5:SHIFT(to state 98)]
From state #98
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 24:SHIFT(to state 29)]
 [term 40:SHIFT(to state 18)] [term 46:SHIFT(to state 4)]
From state #99
 [term 2:REDUCE(with prod 37)] [term 4:REDUCE(with prod 37)]
 [term 5:REDUCE(with prod 37)] [term 6:REDUCE(with prod 37)]
 [term 22:REDUCE(with prod 37)] [term 24:REDUCE(with prod 37)]
 [term 40:REDUCE(with prod 37)] [term 41:REDUCE(with prod 37)]
 [term 46:REDUCE(with prod 37)]
From state #100
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #101
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #102
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 42:SHIFT(to state 62)]
 [term 43:SHIFT(to state 103)] [term 45:SHIFT(to state 63)]
From state #103
 [term 29:SHIFT(to state 104)]
From state #104
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #105
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 39:SHIFT(to state 106)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #106
 [term 2:REDUCE(with prod 34)] [term 4:REDUCE(with prod 34)]
 [term 5:REDUCE(with prod 34)] [term 6:REDUCE(with prod 34)]
 [term 22:REDUCE(with prod 34)] [term 24:REDUCE(with prod 34)]
 [term 40:REDUCE(with prod 34)] [term 41:REDUCE(with prod 34)]
 [term 46:REDUCE(with prod 34)]
From state #107
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 39:SHIFT(to state 108)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #108
 [term 2:REDUCE(with prod 33)] [term 4:REDUCE(with prod 33)]
 [term 5:REDUCE(with prod 33)] [term 6:REDUCE(with prod 33)]
 [term 22:REDUCE(with prod 33)] [term 24:REDUCE(with prod 33)]
 [term 40:REDUCE(with prod 33)] [term 41:REDUCE(with prod 33)]
 [term 46:REDUCE(with prod 33)]
From state #109
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 39:SHIFT(to state 110)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #110
 [term 2:REDUCE(with prod 35)] [term 4:REDUCE(with prod 35)]
 [term 5:REDUCE(with prod 35)] [term 6:REDUCE(with prod 35)]
 [term 22:REDUCE(with prod 35)] [term 24:REDUCE(with prod 35)]
 [term 40:REDUCE(with prod 35)] [term 41:REDUCE(with prod 35)]
 [term 46:REDUCE(with prod 35)]
From state #111
 [term 41:SHIFT(to state 114)]
From state #112
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 22:REDUCE(with prod 25)]
 [term 24:SHIFT(to state 29)] [term 40:SHIFT(to state 18)]
 [term 41:REDUCE(with prod 25)] [term 46:SHIFT(to state 4)]
From state #113
 [term 22:REDUCE(with prod 24)] [term 41:REDUCE(with prod 24)]
From state #114
 [term 2:REDUCE(with prod 36)] [term 4:REDUCE(with prod 36)]
 [term 5:REDUCE(with prod 36)] [term 6:REDUCE(with prod 36)]
 [term 22:REDUCE(with prod 36)] [term 24:REDUCE(with prod 36)]
 [term 40:REDUCE(with prod 36)] [term 41:REDUCE(with prod 36)]
 [term 46:REDUCE(with prod 36)]
From state #115
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #116
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 38:SHIFT(to state 117)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #117
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 24:SHIFT(to state 29)]
 [term 40:SHIFT(to state 18)] [term 46:SHIFT(to state 4)]
From state #118
 [term 2:REDUCE(with prod 38)] [term 4:REDUCE(with prod 38)]
 [term 5:REDUCE(with prod 38)] [term 6:REDUCE(with prod 38)]
 [term 22:REDUCE(with prod 38)] [term 24:REDUCE(with prod 38)]
 [term 40:REDUCE(with prod 38)] [term 41:REDUCE(with prod 38)]
 [term 46:REDUCE(with prod 38)]
From state #119
 [term 0:REDUCE(with prod 0)]
From state #120
 [term 0:REDUCE(with prod 3)] [term 21:REDUCE(with prod 3)]
From state #121
 [term 0:REDUCE(with prod 6)] [term 21:SHIFT(to state 123)]
From state #122
 [term 0:REDUCE(with prod 4)] [term 21:REDUCE(with prod 4)]
From state #123
 [term 46:SHIFT(to state 4)]
From state #124
 [term 17:SHIFT(to state 125)] [term 40:SHIFT(to state 126)]
From state #125
 [term 46:SHIFT(to state 4)]
From state #126
 [term 8:REDUCE(with prod 10)] [term 13:REDUCE(with prod 10)]
 [term 14:REDUCE(with prod 10)] [term 26:REDUCE(with prod 10)]
 [term 41:REDUCE(with prod 10)] [term 46:REDUCE(with prod 10)]
From state #127
 [term 8:REDUCE(with prod 13)] [term 13:SHIFT(to state 132)]
 [term 14:SHIFT(to state 134)] [term 26:SHIFT(to state 133)]
 [term 41:REDUCE(with prod 13)] [term 46:SHIFT(to state 131)]
From state #128
 [term 46:SHIFT(to state 4)]
From state #129
 [term 2:REDUCE(with prod 9)] [term 4:REDUCE(with prod 9)]
 [term 6:REDUCE(with prod 9)] [term 8:REDUCE(with prod 9)]
 [term 13:REDUCE(with prod 9)] [term 14:REDUCE(with prod 9)]
 [term 22:REDUCE(with prod 9)] [term 24:REDUCE(with prod 9)]
 [term 26:REDUCE(with prod 9)] [term 40:REDUCE(with prod 9)]
 [term 41:REDUCE(with prod 9)] [term 46:REDUCE(with prod 9)]
From state #130
 [term 8:SHIFT(to state 136)] [term 41:SHIFT(to state 137)]
From state #131
 [term 46:REDUCE(with prod 18)]
From state #132
 [term 46:REDUCE(with prod 16)]
From state #133
 [term 46:REDUCE(with prod 15)]
From state #134
 [term 46:REDUCE(with prod 17)]
From state #135
 [term 8:REDUCE(with prod 12)] [term 41:REDUCE(with prod 12)]
From state #136
 [term 13:SHIFT(to state 132)] [term 14:SHIFT(to state 134)]
 [term 26:SHIFT(to state 133)] [term 46:SHIFT(to state 131)]
From state #137
 [term 0:REDUCE(with prod 8)] [term 21:REDUCE(with prod 8)]
From state #138
 [term 46:SHIFT(to state 4)]
From state #139
 [term 37:SHIFT(to state 140)]
From state #140
 [term 13:SHIFT(to state 132)] [term 14:SHIFT(to state 134)]
 [term 26:SHIFT(to state 133)] [term 38:REDUCE(with prod 20)]
 [term 46:SHIFT(to state 131)]
From state #141
 [term 38:SHIFT(to state 149)]
From state #142
 [term 46:SHIFT(to state 4)]
From state #143
 [term 38:REDUCE(with prod 22)] [term 44:SHIFT(to state 144)]
From state #144
 [term 13:SHIFT(to state 132)] [term 14:SHIFT(to state 134)]
 [term 26:SHIFT(to state 133)] [term 46:SHIFT(to state 131)]
From state #145
 [term 38:REDUCE(with prod 19)]
From state #146
 [term 13:SHIFT(to state 132)] [term 14:SHIFT(to state 134)]
 [term 26:SHIFT(to state 133)] [term 38:REDUCE(with prod 20)]
 [term 46:SHIFT(to state 131)]
From state #147
 [term 38:REDUCE(with prod 21)]
From state #148
 [term 13:REDUCE(with prod 23)] [term 14:REDUCE(with prod 23)]
 [term 26:REDUCE(with prod 23)] [term 38:REDUCE(with prod 23)]
 [term 44:REDUCE(with prod 23)] [term 46:REDUCE(with prod 23)]
From state #149
 [term 40:SHIFT(to state 150)]
From state #150
 [term 2:REDUCE(with prod 10)] [term 4:REDUCE(with prod 10)]
 [term 6:REDUCE(with prod 10)] [term 13:REDUCE(with prod 10)]
 [term 14:REDUCE(with prod 10)] [term 22:REDUCE(with prod 10)]
 [term 24:REDUCE(with prod 10)] [term 26:REDUCE(with prod 10)]
 [term 40:REDUCE(with prod 10)] [term 46:REDUCE(with prod 10)]
From state #151
 [term 2:SHIFT(to state 19)] [term 4:SHIFT(to state 24)]
 [term 6:SHIFT(to state 16)] [term 13:SHIFT(to state 132)]
 [term 14:SHIFT(to state 134)] [term 22:REDUCE(with prod 25)]
 [term 24:SHIFT(to state 29)] [term 26:SHIFT(to state 133)]
 [term 40:SHIFT(to state 18)] [term 46:SHIFT(to state 152)]
From state #152
 [term 29:REDUCE(with prod 78)] [term 42:REDUCE(with prod 78)]
 [term 46:REDUCE(with prod 18)]
From state #153
 [term 22:SHIFT(to state 154)]
From state #154
 [term 15:SHIFT(to state 39)] [term 16:SHIFT(to state 48)]
 [term 18:SHIFT(to state 50)] [term 20:SHIFT(to state 41)]
 [term 25:SHIFT(to state 47)] [term 32:SHIFT(to state 35)]
 [term 37:SHIFT(to state 40)] [term 46:SHIFT(to state 36)]
From state #155
 [term 28:SHIFT(to state 59)] [term 30:SHIFT(to state 61)]
 [term 31:SHIFT(to state 60)] [term 33:SHIFT(to state 58)]
 [term 35:SHIFT(to state 57)] [term 39:SHIFT(to state 156)]
 [term 42:SHIFT(to state 62)] [term 45:SHIFT(to state 63)]
From state #156
 [term 41:SHIFT(to state 157)]
From state #157
 [term 8:REDUCE(with prod 14)] [term 41:REDUCE(with prod 14)]
From state #158
 [term 39:SHIFT(to state 159)]
From state #159
 [term 2:REDUCE(with prod 11)] [term 4:REDUCE(with prod 11)]
 [term 6:REDUCE(with prod 11)] [term 8:REDUCE(with prod 11)]
 [term 13:REDUCE(with prod 11)] [term 14:REDUCE(with prod 11)]
 [term 22:REDUCE(with prod 11)] [term 24:REDUCE(with prod 11)]
 [term 26:REDUCE(with prod 11)] [term 40:REDUCE(with prod 11)]
 [term 41:REDUCE(with prod 11)] [term 46:REDUCE(with prod 11)]
From state #160
 [term 40:SHIFT(to state 161)]
From state #161
 [term 8:REDUCE(with prod 10)] [term 13:REDUCE(with prod 10)]
 [term 14:REDUCE(with prod 10)] [term 26:REDUCE(with prod 10)]
 [term 41:REDUCE(with prod 10)] [term 46:REDUCE(with prod 10)]
From state #162
 [term 8:REDUCE(with prod 13)] [term 13:SHIFT(to state 132)]
 [term 14:SHIFT(to state 134)] [term 26:SHIFT(to state 133)]
 [term 41:REDUCE(with prod 13)] [term 46:SHIFT(to state 131)]
From state #163
 [term 8:SHIFT(to state 136)] [term 41:SHIFT(to state 164)]
From state #164
 [term 0:REDUCE(with prod 7)] [term 21:REDUCE(with prod 7)]
From state #165
 [term 0:REDUCE(with prod 5)]
From state #166
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 2]
From state #1
From state #2
 [non term 2->state 121] [non term 3->state 120] [non term 4->state 122]
 [non term 5->state 119]
From state #3
 [non term 43->state 5]
From state #4
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
 [non term 43->state 13]
From state #13
From state #14
From state #15
 [non term 14->state 26] [non term 15->state 22] [non term 16->state 21]
 [non term 17->state 25] [non term 18->state 27] [non term 20->state 28]
 [non term 21->state 17] [non term 22->state 20] [non term 43->state 23]
From state #16
From state #17
From state #18
 [non term 14->state 112] [non term 15->state 22] [non term 16->state 21]
 [non term 17->state 25] [non term 18->state 27] [non term 19->state 111]
 [non term 20->state 28] [non term 21->state 17] [non term 22->state 20]
 [non term 43->state 23]
From state #19
 [non term 25->state 109] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
From state #29
From state #30
 [non term 25->state 55] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #31
From state #32
From state #33
From state #34
From state #35
 [non term 25->state 91] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #36
From state #37
From state #38
From state #39
From state #40
 [non term 25->state 89] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #41
From state #42
From state #43
From state #44
From state #45
From state #46
From state #47
From state #48
From state #49
From state #50
 [non term 43->state 83]
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
 [non term 25->state 80] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #58
 [non term 25->state 79] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #59
 [non term 25->state 78] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #60
 [non term 25->state 77] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #61
 [non term 25->state 76] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #62
 [non term 25->state 74] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #63
 [non term 43->state 65]
From state #64
From state #65
From state #66
 [non term 23->state 68] [non term 25->state 67] [non term 26->state 42]
 [non term 27->state 45] [non term 28->state 44] [non term 29->state 33]
 [non term 30->state 49] [non term 31->state 43] [non term 32->state 37]
 [non term 33->state 51] [non term 34->state 52] [non term 35->state 54]
 [non term 36->state 31] [non term 37->state 38] [non term 38->state 53]
 [non term 39->state 46] [non term 40->state 34] [non term 41->state 32]
From state #67
 [non term 24->state 70]
From state #68
From state #69
From state #70
From state #71
 [non term 25->state 72] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #72
 [non term 24->state 73]
From state #73
From state #74
From state #75
From state #76
From state #77
From state #78
From state #79
From state #80
From state #81
From state #82
From state #83
From state #84
From state #85
From state #86
 [non term 25->state 87] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #87
From state #88
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
 [non term 25->state 95] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #95
From state #96
 [non term 14->state 97] [non term 15->state 22] [non term 16->state 21]
 [non term 17->state 25] [non term 18->state 27] [non term 20->state 28]
 [non term 21->state 17] [non term 22->state 20] [non term 43->state 23]
From state #97
From state #98
 [non term 14->state 99] [non term 15->state 22] [non term 16->state 21]
 [non term 17->state 25] [non term 18->state 27] [non term 20->state 28]
 [non term 21->state 17] [non term 22->state 20] [non term 43->state 23]
From state #99
From state #100
 [non term 25->state 107] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #101
 [non term 25->state 102] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #102
From state #103
From state #104
 [non term 25->state 105] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #105
From state #106
From state #107
From state #108
From state #109
From state #110
From state #111
From state #112
 [non term 14->state 112] [non term 15->state 22] [non term 16->state 21]
 [non term 17->state 25] [non term 18->state 27] [non term 19->state 113]
 [non term 20->state 28] [non term 21->state 17] [non term 22->state 20]
 [non term 43->state 23]
From state #113
From state #114
From state #115
 [non term 25->state 116] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #116
From state #117
 [non term 14->state 118] [non term 15->state 22] [non term 16->state 21]
 [non term 17->state 25] [non term 18->state 27] [non term 20->state 28]
 [non term 21->state 17] [non term 22->state 20] [non term 43->state 23]
From state #118
From state #119
From state #120
From state #121
 [non term 2->state 121] [non term 3->state 120] [non term 4->state 122]
 [non term 5->state 165]
From state #122
From state #123
 [non term 43->state 124]
From state #124
From state #125
 [non term 43->state 160]
From state #126
 [non term 6->state 127]
From state #127
 [non term 7->state 129] [non term 8->state 130] [non term 13->state 128]
From state #128
 [non term 43->state 158]
From state #129
From state #130
 [non term 9->state 135]
From state #131
From state #132
From state #133
From state #134
From state #135
From state #136
 [non term 13->state 138]
From state #137
From state #138
 [non term 43->state 139]
From state #139
From state #140
 [non term 10->state 141] [non term 12->state 143] [non term 13->state 142]
From state #141
From state #142
 [non term 43->state 148]
From state #143
 [non term 11->state 145]
From state #144
 [non term 12->state 146] [non term 13->state 142]
From state #145
From state #146
 [non term 10->state 147] [non term 12->state 143] [non term 13->state 142]
From state #147
From state #148
From state #149
From state #150
 [non term 6->state 151]
From state #151
 [non term 7->state 129] [non term 13->state 128] [non term 14->state 112]
 [non term 15->state 22] [non term 16->state 21] [non term 17->state 25]
 [non term 18->state 27] [non term 19->state 153] [non term 20->state 28]
 [non term 21->state 17] [non term 22->state 20] [non term 43->state 23]
From state #152
From state #153
From state #154
 [non term 25->state 155] [non term 26->state 42] [non term 27->state 45]
 [non term 28->state 44] [non term 29->state 33] [non term 30->state 49]
 [non term 31->state 43] [non term 32->state 37] [non term 33->state 51]
 [non term 34->state 52] [non term 35->state 54] [non term 36->state 31]
 [non term 37->state 38] [non term 38->state 53] [non term 39->state 46]
 [non term 40->state 34] [non term 41->state 32]
From state #155
From state #156
From state #157
From state #158
From state #159
From state #160
From state #161
 [non term 6->state 162]
From state #162
 [non term 7->state 129] [non term 8->state 163] [non term 13->state 128]
From state #163
 [non term 9->state 135]
From state #164
From state #165
From state #166
-----------------------------
------- CUP v0.11b 20150930 (SVN rev 66) Parser Generation Summary -------
  0 errors and 9 warnings
  50 terminals, 44 non-terminals, and 79 productions declared, 
  producing 167 unique parse states.
  8 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20150930 (SVN rev 66))
